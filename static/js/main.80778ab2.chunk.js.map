{"version":3,"sources":["AddTaskForm.js","TodoList.js","serviceWorker.js","index.js"],"names":["AddTaskForm","addTask","useState","value","setValue","onSubmit","e","preventDefault","data-testid","type","placeholder","onChange","target","ToDoList","text","isCompleted","tasks","setTasks","className","map","task","index","key","onClick","newTasks","toggleTask","splice","removeTask","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gNA2BeA,EAzBK,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACrB,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAQA,OACE,0BAAMC,SAPa,SAACC,GACpBA,EAAEC,iBACFJ,GAASF,EAAQE,GACjBC,EAAS,MAKP,2BACEI,cAAY,YACZC,KAAK,OACLN,MAAOA,EACPO,YAAY,oCACZC,SAAU,SAACL,GAAD,OAAOF,EAASE,EAAEM,OAAOT,UAErC,4BAAQK,cAAY,aAAaC,KAAK,UAAtC,OCmCSI,G,MAnDE,WACf,MAA0BX,mBAAS,CACjC,CACEY,KAAM,OACNC,aAAa,GAEf,CACED,KAAM,UACNC,aAAa,KAPjB,mBAAOC,EAAP,KAAcC,EAAd,KAyBA,OACE,yBAAKC,UAAU,aACb,qDACA,yBAAKV,cAAY,kBACdQ,EAAMG,KAAI,SAACC,EAAMC,GAAP,OACT,yBAAKb,cAAY,YAAYU,UAAU,OAAOI,IAAKD,GACjD,0BACEE,QAAS,kBAnBF,SAACF,GAClB,IAAMG,EAAQ,YAAOR,GACrBQ,EAASH,GAAON,aAAeS,EAASH,GAAON,YAC/CE,EAASO,GAgBgBC,CAAWJ,IAC1BH,UACEE,EAAKL,YAAc,2BAA6B,aAGjDK,EAAKN,MAER,4BAAQN,cAAY,cAAce,QAAS,kBApBlC,SAACF,GAClB,IAAMG,EAAQ,YAAOR,GACrBQ,EAASE,OAAOL,EAAO,GACvBJ,EAASO,GAiBgDG,CAAWN,KAA5D,UAMN,kBAAC,EAAD,CAAapB,QAlCD,SAACa,GAAD,OAAUG,EAAS,GAAD,mBAAKD,GAAL,CAAY,CAAEF,iBCJ9Bc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.80778ab2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst AddTaskForm = ({ addTask }) => {\n  const [value, setValue] = useState(\"\");\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    value && addTask(value);\n    setValue(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        data-testid=\"input-box\"\n        type=\"text\"\n        value={value}\n        placeholder=\"Enter a title for this taskâ€¦\"\n        onChange={(e) => setValue(e.target.value)}\n      />\n      <button data-testid=\"submit-btn\" type=\"submit\">\n        +\n      </button>\n    </form>\n  );\n};\n\nexport default AddTaskForm;\n","import React, { useState } from \"react\";\nimport AddTaskForm from \"./AddTaskForm\";\nimport \"./TodoList.css\";\n\nconst ToDoList = () => {\n  const [tasks, setTasks] = useState([\n    {\n      text: \"Like\",\n      isCompleted: false,\n    },\n    {\n      text: \"Comment\",\n      isCompleted: false,\n    },\n  ]);\n\n  const addTask = (text) => setTasks([...tasks, { text }]);\n\n  const toggleTask = (index) => {\n    const newTasks = [...tasks];\n    newTasks[index].isCompleted = !newTasks[index].isCompleted;\n    setTasks(newTasks);\n  };\n\n  const removeTask = (index) => {\n    const newTasks = [...tasks];\n    newTasks.splice(index, 1);\n    setTasks(newTasks);\n  };\n\n  return (\n    <div className=\"todo-list\">\n      <h5>Todo list Application</h5>\n      <div data-testid=\"list-container\">\n        {tasks.map((task, index) => (\n          <div data-testid=\"todo-item\" className=\"todo\" key={index}>\n            <span\n              onClick={() => toggleTask(index)}\n              className={\n                task.isCompleted ? \"todo-text todo-completed\" : \"todo-text\"\n              }\n            >\n              {task.text}\n            </span>\n            <button data-testid=\"remove-item\" onClick={() => removeTask(index)}>\n              x\n            </button>\n          </div>\n        ))}\n      </div>\n      <AddTaskForm addTask={addTask} />\n    </div>\n  );\n};\n\nexport default ToDoList;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport TodoList from \"./TodoList\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <TodoList />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}